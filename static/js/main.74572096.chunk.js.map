{"version":3,"sources":["Components/models/room2.gltf","Components/models/btnintroduction.gltf","Components/Modal/Modal.js","App.js","reportWebVitals.js","index.js"],"names":["Modal","open","close","children","className","onClick","App","room","useGLTFLoader","Room","introduction","Introduction","useState","isOpen","setIsOpen","colorManagement","shadowMap","camera","position","fov","zoom","rotation","onPointerDown","object","scene","dispose","intensity","enableRotate","enableZoom","maxPolarAngle","minPolarAngle","enablePan","screenSpacePanning","rotateSpeed","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","fallback","document","getElementById"],"mappings":"qPAAe,MAA0B,mC,QCA1B,G,KAAA,IAA0B,8C,MCG1B,SAASA,EAAT,GAAyC,IAAzBC,EAAwB,EAAxBA,KAAMC,EAAkB,EAAlBA,MAAOC,EAAW,EAAXA,SACxC,OAAKF,EAGD,qCACA,qBAAKG,UAAU,YACf,sBAAKA,UAAU,QAAf,UACKD,EACD,oBAAIC,UAAU,OAAOC,QAASH,EAA9B,qBAPU,KCyCPI,MA9Bf,WACE,IAAMC,EAAOC,YAAcC,GAAM,GAC3BC,EAAeF,YAAcG,GAAc,GAFpC,EAIeC,oBAAS,GAJxB,mBAINC,EAJM,KAIEC,EAJF,KAMb,OACE,0BAASV,UAAU,MAAnB,UACE,qBAAKA,UAAU,eAEf,cAAC,EAAD,CAAOH,KAAMY,EAAQX,MAAO,kBAAKY,GAAU,IAA3C,mBACA,eAAC,IAAD,CACAC,iBAAe,EACfC,WAAS,EACTC,OAAQ,CAAEC,SAAU,CAAC,GAAI,EAAG,EAAG,GAAIC,IAAI,GAAIC,KAAM,GAHjD,UAKE,uBAAMC,SAAU,CAAC,EAAE,KAAK,GAAxB,UACA,sBAAMhB,QAAS,kBAAMS,GAAU,IAAOQ,cAAe,kBAAMR,GAAU,IAArE,SACE,2BAAWS,OAAQb,EAAac,MAAON,SAAU,CAAC,GAAG,IAAI,OAE3D,2BAAWK,OAAQhB,EAAKiB,MAAON,SAAU,CAAC,GAAG,IAAI,GAAIO,QAAS,UAE9D,8BAAcC,UAAW,MACzB,cAAC,IAAD,CAAeC,cAAc,EAAMC,YAAY,EAAOC,cAAe,MAAOC,cAAe,MAAOC,WAAW,EAAOC,oBAAoB,EAAMC,aAAc,YC1BrJC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,WAAD,CAAUC,SAAU,oDAApB,SACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.74572096.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/room2.aad041ee.gltf\";","export default __webpack_public_path__ + \"static/media/btnintroduction.12390522.gltf\";","import React from 'react';\r\nimport './Modal.css'\r\n\r\nexport default function Modal({open, close, children}) {\r\n    if (!open) return null \r\n\r\n    return (\r\n        <>\r\n        <div className=\"overlay\"></div>\r\n        <div className=\"Modal\">\r\n            {children}\r\n            <h1 className=\"exit\" onClick={close}>x</h1>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n","import React, { Suspense, useState } from \"react\";\nimport \"./App.css\";\nimport { Canvas, useFrame} from \"react-three-fiber\";\nimport Room from \"./Components/models/room2.gltf\";\nimport { useGLTFLoader , OrbitControls} from \"drei\";\nimport { AmbientLight } from \"three\";\nimport {BrowserRouter, Route, Switch} from \"react-router-dom\"\nimport Introduction from \"./Components/models/btnintroduction.gltf\";\nimport Modal from \"./Components/Modal/Modal.js\"\n\n// function Model() {\n//   const room = useGLTFLoader(Room, true);\n//   return <primitive object={room.scene} position={[0,0,0]} dispose={null} />\n// }\n\nfunction App() {\n  const room = useGLTFLoader(Room, true);\n  const introduction = useGLTFLoader(Introduction, true);\n\n  const [isOpen, setIsOpen] = useState(false);\n\n  return (\n    <section className=\"App\">\n      <div className=\"navigation\">\n      </div>\n      <Modal open={isOpen} close={()=> setIsOpen(false)}>Hello</Modal>\n      <Canvas\n      colorManagement\n      shadowMap\n      camera={{ position: [0, -0, 2, 1], fov:55, zoom: 1 }}\n      >\n        <mesh rotation={[0,3.14,0]}>\n        <mesh onClick={() => setIsOpen(true)} onPointerDown={() => setIsOpen(true)}>\n          <primitive object={introduction.scene} position={[0,-3.8,0]}/>\n        </mesh>\n        <primitive object={room.scene} position={[0,-3.8,0]} dispose={null}/>\n        </mesh>\n        <ambientLight intensity={1.6}/>\n        <OrbitControls enableRotate={true} enableZoom={false} maxPolarAngle={1.495} minPolarAngle={1.495} enablePan={false} screenSpacePanning={true} rotateSpeed={-0.6}/>\n      </Canvas>\n    </section>\n  );\n}\n\n\nexport default App;\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, {Suspense} from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <Suspense fallback={<h1>Loading profile...</h1>}>\n    <App />\n  </Suspense>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}