{"version":3,"sources":["Components/models/room2.gltf","App.js","reportWebVitals.js","index.js"],"names":["App","room","useGLTFLoader","Room","className","colorManagement","shadowMap","camera","position","fov","zoom","intensity","rotation","object","scene","dispose","enableRotate","enableZoom","maxPolarAngle","minPolarAngle","enablePan","screenSpacePanning","rotateSpeed","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","fallback","document","getElementById"],"mappings":"uNAAe,MAA0B,mC,aC4C1BA,MA7Bf,WACE,IAAMC,EAAOC,YAAcC,GAAM,GAEjC,OAEE,0BAASC,UAAU,MAAnB,UACE,qBAAKA,UAAU,eAEf,eAAC,IAAD,CACAC,iBAAe,EACfC,WAAS,EACTC,OAAQ,CAAEC,SAAU,CAAC,GAAI,EAAE,EAAG,GAAIC,IAAI,GAAIC,KAAM,GAHhD,UAUM,8BAAcC,UAAW,MAEzB,sBAAMC,SAAU,CAAC,EAAE,KAAK,GAAxB,SACA,2BAAWC,OAAQZ,EAAKa,MAAON,SAAU,CAAC,GAAG,IAAI,GAAIO,QAAS,SAEjE,cAAC,IAAD,CAAeC,cAAc,EAAMC,YAAY,EAAOC,cAAe,KAAMC,cAAe,KAAMC,WAAW,EAAOC,oBAAoB,EAAMC,aAAc,WC1BpJC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,WAAD,CAAUC,SAAU,oDAApB,SACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.7bbcdf68.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/room2.44b86f32.gltf\";","import React, { Suspense } from \"react\";\nimport \"./App.css\";\nimport { Canvas} from \"react-three-fiber\";\n// import Model from \"./Components/Model.js\";\n\nimport Room from \"./Components/models/room2.gltf\";\nimport { useGLTFLoader , OrbitControls} from \"drei\";\nimport { AmbientLight } from \"three\";\n\n// function Model() {\n//   const room = useGLTFLoader(Room, true);\n//   return <primitive object={room.scene} position={[0,0,0]} dispose={null} />\n// }\n\n\nfunction App() {\n  const room = useGLTFLoader(Room, true);\n  \n  return (\n    \n    <section className=\"App\">\n      <div className=\"navigation\">\n      </div>\n      <Canvas\n      colorManagement\n      shadowMap\n      camera={{ position: [0, -0,2, 1], fov:55, zoom: 1 }}\n      >\n        {/* <ambientLight intensity={5} color=\"pink\"/> */}\n            {/* <pointLight intensity={1} position={[0, 20, 10]} color=\"pink\"/>\n            <pointLight intensity={1} position={[0, 10, -10]} color=\"pink\"/>\n            <pointLight intensity={1} position={[10, 10, -10]} color=\"pink\"/>\n            <pointLight intensity={1} position={[-10, 10, -10]} color=\"pink\"/> */}\n            <ambientLight intensity={1.6}/>\n            {/* <pointLight intensity={0.01} position={[10, 0, 0]}/> */}\n            <mesh rotation={[0,3.14,0]}>\n            <primitive object={room.scene} position={[0,-3.8,0]} dispose={null}/>\n            </mesh>\n         <OrbitControls enableRotate={true} enableZoom={false} maxPolarAngle={1.48} minPolarAngle={1.48} enablePan={false} screenSpacePanning={true} rotateSpeed={-1}/>\n      </Canvas>\n    </section>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, {Suspense} from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <Suspense fallback={<h1>Loading profile...</h1>}>\n    <App />\n  </Suspense>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}